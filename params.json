{"name":"Trousers","tagline":"Mirrror of git://git.code.sf.net/p/trousers/trousers","body":"trousers README\r\n\r\n  Trousers is an open-source TCG Software Stack (TSS), released under\r\nthe Common Public License. Trousers aims to be compliant with the\r\n1.1b and 1.2 TSS specifications available from the Trusted Computing\r\nGroup website:\r\n\r\nhttp://www.trustedcomputinggroup.org\r\n\r\n\r\nCONTACT\r\n\r\n  For information on the TrouSerS project, please send mail to the\r\nfollowing lists:\r\n\r\nUse of the TSS API and TrouSerS:\r\n  trousers-users@lists.sf.net\r\n\r\nDiscussion of the internals of the TrouSerS implementation:\r\n  trousers-tech@lists.sf.net\r\n\r\nPossibly sensitive security related bugs:\r\n  Debora Velarde <dvelarde@us.ibm.com>\r\n\r\nRun-of-the-mill bug reports should use the TrouSerS bug tracker:\r\n  http://sourceforge.net/tracker/?group_id=126012&atid=704358\r\n\r\n\r\nBUILD REQUIREMENTS\r\n\r\n  Packages needed to build:\r\n\r\n  automake > 1.4\r\n  autoconf > 1.4\r\n  pkgconfig\r\n  libtool\r\n  gtk2-devel\r\n  openssl-devel >= 0.9.7\r\n  pthreads library (glibc-devel)\r\n\r\n\r\nBUILDING the TSS 32-bit\r\n\r\n  Build and install the latest TPM device driver from\r\nsf.net/projects/tpmdd either compiled in or loaded as a\r\nmodule. UPDATE: This driver is now included in the vanilla 2.6.12\r\nkernel!  If you are doing this, trousers should just work after a\r\nvanilla build. Follow the build instructions below and read\r\nRUNNING the TSS, below.\r\n\r\n  To build trousers after you have the device driver installed:\r\n\r\n  $ sh bootstrap.sh\r\n  $ ./configure [--enable-debug] [--enable-gprof] [--enable-gcov]\r\n  $ make\r\n  # make install\r\n\r\n  Here are the default locations of files that trousers installs:\r\n\r\n  /usr/local/sbin/tcsd\r\n  /usr/local/etc/tcsd.conf\r\n  /usr/local/lib/libtspi.so.0.0.X\r\n  /usr/local/lib/libtspi.so.0 -> libtspi.so.0.0.X\r\n  /usr/local/lib/libtspi.so -> libtspi.so.0.0.X\r\n  /usr/local/lib/libtspi.la\r\n  /usr/local/lib/libtddl.a\r\n  /usr/local/var/lib/tpm\r\n\r\n  By default the build will place everything in /usr/local. To install\r\nin a slightly more predictable place, use `./configure --prefix=/usr`.\r\n\r\n  'make install' will run ldconfig, but if /usr/local/lib is not in\r\nyour /etc/ld.so.conf, this won't make a difference. You may need to\r\nmanually add it and run ldconfig as root to allow your apps to link at\r\nrun time to libtspi.so.\r\n\r\n\r\nBUILDING the TSS 64-bit\r\n\r\n  TrouSerS has been built and tested on ppc64 and x86_64, so please\r\ndon't hesitate to report bugs on these platforms.  Building everything\r\n64-bit will require a few more flags than are necessary for a 32-bit\r\nplatform.  Here are some example instructions for ppc64:\r\n\r\n  $ sh bootstrap.sh\r\n  $ export PKG_CONFIG_PATH=/usr/lib64/pkgconfig\r\n  $ CFLAGS=\"-L/usr/lib64 -L/opt/gnome/lib64\" LDFLAGS=\"-L/usr/lib64 \\\r\n           -L/opt/gnome/lib64\" ./configure --libdir=\"/usr/local/lib64\"\r\n  $ make\r\n  # make install\r\n\r\n  Hopefully the above example will get you going on building in your\r\n64-bit environment.  If you need to do anything special, please send\r\nyour build steps to trousers-users@lists.sf.net and I'll include it\r\nhere.\r\n\r\n\r\nUSING TROUSERS ON AN ALREADY OWNED TPM\r\n\r\n  If you've already taken ownership of your TPM using a TSS under another\r\noperating system, there are a few issues you should be aware of.\r\n\r\n  Auth vs No-Auth SRK:  In order to trick trousers into thinking it has taken\r\nownership of the TPM it's running on, you will need to create a persistent\r\nstorage file for trousers to use.  Normally trousers would create this file\r\nitself at the time ownership is taken.  If your SRK has been given an\r\nauthorization password by the non-Linux OS, you will need to move the file\r\ndist/system.data.auth to /usr/local/var/lib/tpm/system.data.  If you've\r\ntaken ownership of your TPM without issuing a password, move\r\ndist/system.data.noauth to /usr/local/var/lib/tpm/system.data.\r\n\r\n  Passwords:  When entering passwords for keys you'd like to use in both\r\nLinux and other OS's, you'll need to take note of how you entered those\r\npasswords.  The TSS spec states that when a password is entered through a\r\nGUI popup dialog box provided by the TSS library, the password should be\r\nconverted to the UTF-16 encoding and then hashed using SHA-1, including\r\nthe UTF-16 null terminator in the hash calculation.\r\n\r\n  In order to work around this problem, specify the -u option to the\r\ntpm-tools command line to convert the password to UTF-16 before hashing.\r\nThis, however, unfolds yet another problem...\r\n\r\n  Some TSS stacks aren't compliant with the TSS spec, in that they hash\r\ntheir passwords without including the terminating null character.  This\r\nmeans that there are effectively two versions of any password set through\r\na popup dialog box.  Trousers will include the terminating null character\r\nin its hashes of UTF-16 data.\r\n\r\n  We'll do our best to track other TSS software and how it behaves.  Please\r\nsee the trousers FAQ at http://trousers.sf.net for more information.\r\n\r\n\r\nARCHITECTURE\r\n\r\n  This TSS implementation has several components.\r\n\r\n  A) The TCS Daemon - A user space daemon that should be (according to\r\n     the TSS spec) the only portal to the TPM device driver. At boot\r\n     time, the TCS Daemon should be started, it should open the TPM\r\n     device driver and from that point on, all requests to the TPM\r\n     should go through the TSS stack. The TCSD manages TPM resources\r\n     and handles requests from TSP's both local and remote.\r\n\r\n  B) The TSP shared library - The TSP (TCG Service Provider) is a\r\n     shared library that enables applications to talk to TCSD's both\r\n     locally and remotely. The TSP also manages resources used in\r\n     commicating with the application and the TCSD and transparently\r\n     contacts the TCSD whenever necessary.\r\n\r\n  C) Persistent Storage (PS) files - TSS's have 2 different kinds of\r\n     PS for keys.  PS can be thought of as a database for keys, with\r\n     each key in the database indexed by a UUID.\r\n\r\n     'User' persistent storage is maintained by the application's TSP\r\n     library.  Upon writing the first key to User PS, the TSP library\r\n     creates a new file at ~/.trousers/user.data, using the effective\r\n     user id of the process executing the call to find ~. An environment\r\n     variable, TSS_USER_PS_FILE, can also be set to point the TSP library\r\n     to a different location for the User PS. This environment variable\r\n     has the lifetime of the TSP context, so to store 2 keys in 2\r\n     different files, you will need to call Tspi_Context_Close, set the\r\n     new location, and open the context again.\r\n\r\n     'System' persistent storage is controlled by the TCS and stays\r\n     valid across all application lifetimes, TCSD restarts and system\r\n     resets. Data registered in system PS stays valid until an application\r\n     requests that it be removed. The System PS file by default is\r\n     /usr/local/var/lib/tpm/system.data. The system PS file is initially\r\n     created when ownership of the TPM is first taken.\r\n\r\n  D) A config file. By default located in /usr/local/etc/tcsd.conf.\r\n\r\n\r\nRUNNING the TSS\r\n\r\n  By default, the TCS daemon is not reachable over the internet, so if\r\nyou just plan to access it locally, running it as root with a root owned\r\ndevice node is probably ok.  Just make sure your device driver is loaded\r\nand start the tcsd as root.\r\n\r\n  If you would like to run the TCS daemon as an unprivleged user,\r\nplease follow these instructions:\r\n\r\n  If you're using the device driver from a linux 2.6.12+ kernel and have\r\nudev enabled, you need to add the following line to your\r\nudev.permissions file (usually in /etc/udev somewhere):\r\n\r\n  tpm[0-9]:tss:tss:0600\r\n\r\n  and then just load the device driver with:\r\n  # modprobe tpm_atmel\r\n  or,\r\n  # modprobe tpm_natl\r\n\r\n  start the TCS Core Services daemon, by default /usr/local/sbin/tcsd.\r\n  # /usr/local/sbin/tcsd\r\n\r\n  If you're attempting to make the TCS Core Services daemon communicate with a\r\nsoftwware TPM through TCP, you must call it using the -e option. \r\n\r\n  # /usr/local/sbin/tcsd -e\r\n\r\n  The default values for hostname, port and UN socket device path are  \"localhost\", \r\n\"6545\" and \"/var/run/tpm/tpmd_socket:0\". It will search for the IN socket device,\r\nthen for an UN socket one, and then for the real TPM in this order.\r\nThe default values match with the current open source project required values, if\r\nfor instance case you need to set values of your choice, the environment variables \r\nfor them are TCSD_TCP_DEVICE_HOSTNAME, TCSD_TCP_DEVICE_PORT if using an IN socket \r\nand TCSD_UN_SOCKET_DEVICE_PATH if running an UN socket.\r\n\r\n\r\nDEBUGGING\r\n\r\n  If you've compiled trousers with './configure --enable-debug' and would like\r\nto turn debugging output off at run-time, set the environment variable\r\nTSS_DEBUG_OFF to any value.\r\n\r\n\r\nBUILDING a TSS RPM\r\n\r\n # sh bootstrap.sh\r\n # ./configure\r\n # cd ..\r\n # mv trousers trousers-${version}\r\n # tar zcvf /usr/src/packages/SOURCES/trousers-${version}.tar.gz \\\r\n            trousers-${version}\r\n # rpmbuild -bb trousers-${version}/dist/trousers.spec\r\n\r\nEOF\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}